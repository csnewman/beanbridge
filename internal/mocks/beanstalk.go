// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockBeanstalkHandler is an autogenerated mock type for the Handler type
type MockBeanstalkHandler struct {
	mock.Mock
}

type MockBeanstalkHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBeanstalkHandler) EXPECT() *MockBeanstalkHandler_Expecter {
	return &MockBeanstalkHandler_Expecter{mock: &_m.Mock}
}

// Bury provides a mock function with given fields: id, pri
func (_m *MockBeanstalkHandler) Bury(id uint64, pri uint64) error {
	ret := _m.Called(id, pri)

	if len(ret) == 0 {
		panic("no return value specified for Bury")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64) error); ok {
		r0 = rf(id, pri)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeanstalkHandler_Bury_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bury'
type MockBeanstalkHandler_Bury_Call struct {
	*mock.Call
}

// Bury is a helper method to define mock.On call
//   - id uint64
//   - pri uint64
func (_e *MockBeanstalkHandler_Expecter) Bury(id interface{}, pri interface{}) *MockBeanstalkHandler_Bury_Call {
	return &MockBeanstalkHandler_Bury_Call{Call: _e.mock.On("Bury", id, pri)}
}

func (_c *MockBeanstalkHandler_Bury_Call) Run(run func(id uint64, pri uint64)) *MockBeanstalkHandler_Bury_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Bury_Call) Return(_a0 error) *MockBeanstalkHandler_Bury_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeanstalkHandler_Bury_Call) RunAndReturn(run func(uint64, uint64) error) *MockBeanstalkHandler_Bury_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockBeanstalkHandler) Delete(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeanstalkHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBeanstalkHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint64
func (_e *MockBeanstalkHandler_Expecter) Delete(id interface{}) *MockBeanstalkHandler_Delete_Call {
	return &MockBeanstalkHandler_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockBeanstalkHandler_Delete_Call) Run(run func(id uint64)) *MockBeanstalkHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Delete_Call) Return(_a0 error) *MockBeanstalkHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeanstalkHandler_Delete_Call) RunAndReturn(run func(uint64) error) *MockBeanstalkHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Ignore provides a mock function with given fields: tube
func (_m *MockBeanstalkHandler) Ignore(tube string) (int, error) {
	ret := _m.Called(tube)

	if len(ret) == 0 {
		panic("no return value specified for Ignore")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(tube)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(tube)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tube)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeanstalkHandler_Ignore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ignore'
type MockBeanstalkHandler_Ignore_Call struct {
	*mock.Call
}

// Ignore is a helper method to define mock.On call
//   - tube string
func (_e *MockBeanstalkHandler_Expecter) Ignore(tube interface{}) *MockBeanstalkHandler_Ignore_Call {
	return &MockBeanstalkHandler_Ignore_Call{Call: _e.mock.On("Ignore", tube)}
}

func (_c *MockBeanstalkHandler_Ignore_Call) Run(run func(tube string)) *MockBeanstalkHandler_Ignore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Ignore_Call) Return(_a0 int, _a1 error) *MockBeanstalkHandler_Ignore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeanstalkHandler_Ignore_Call) RunAndReturn(run func(string) (int, error)) *MockBeanstalkHandler_Ignore_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function with given fields: pri, delay, ttr, data
func (_m *MockBeanstalkHandler) Put(pri uint64, delay uint64, ttr uint64, data []byte) (uint64, bool, error) {
	ret := _m.Called(pri, delay, ttr, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 uint64
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, uint64, []byte) (uint64, bool, error)); ok {
		return rf(pri, delay, ttr, data)
	}
	if rf, ok := ret.Get(0).(func(uint64, uint64, uint64, []byte) uint64); ok {
		r0 = rf(pri, delay, ttr, data)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64, uint64, uint64, []byte) bool); ok {
		r1 = rf(pri, delay, ttr, data)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(uint64, uint64, uint64, []byte) error); ok {
		r2 = rf(pri, delay, ttr, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeanstalkHandler_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockBeanstalkHandler_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - pri uint64
//   - delay uint64
//   - ttr uint64
//   - data []byte
func (_e *MockBeanstalkHandler_Expecter) Put(pri interface{}, delay interface{}, ttr interface{}, data interface{}) *MockBeanstalkHandler_Put_Call {
	return &MockBeanstalkHandler_Put_Call{Call: _e.mock.On("Put", pri, delay, ttr, data)}
}

func (_c *MockBeanstalkHandler_Put_Call) Run(run func(pri uint64, delay uint64, ttr uint64, data []byte)) *MockBeanstalkHandler_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(uint64), args[3].([]byte))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Put_Call) Return(_a0 uint64, _a1 bool, _a2 error) *MockBeanstalkHandler_Put_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBeanstalkHandler_Put_Call) RunAndReturn(run func(uint64, uint64, uint64, []byte) (uint64, bool, error)) *MockBeanstalkHandler_Put_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with given fields: id, pri, delay
func (_m *MockBeanstalkHandler) Release(id uint64, pri uint64, delay uint64) error {
	ret := _m.Called(id, pri, delay)

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, uint64) error); ok {
		r0 = rf(id, pri, delay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeanstalkHandler_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type MockBeanstalkHandler_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
//   - id uint64
//   - pri uint64
//   - delay uint64
func (_e *MockBeanstalkHandler_Expecter) Release(id interface{}, pri interface{}, delay interface{}) *MockBeanstalkHandler_Release_Call {
	return &MockBeanstalkHandler_Release_Call{Call: _e.mock.On("Release", id, pri, delay)}
}

func (_c *MockBeanstalkHandler_Release_Call) Run(run func(id uint64, pri uint64, delay uint64)) *MockBeanstalkHandler_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(uint64), args[2].(uint64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Release_Call) Return(_a0 error) *MockBeanstalkHandler_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeanstalkHandler_Release_Call) RunAndReturn(run func(uint64, uint64, uint64) error) *MockBeanstalkHandler_Release_Call {
	_c.Call.Return(run)
	return _c
}

// Reserve provides a mock function with given fields: timeout
func (_m *MockBeanstalkHandler) Reserve(timeout int64) (uint64, []byte, error) {
	ret := _m.Called(timeout)

	if len(ret) == 0 {
		panic("no return value specified for Reserve")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(int64) (uint64, []byte, error)); ok {
		return rf(timeout)
	}
	if rf, ok := ret.Get(0).(func(int64) uint64); ok {
		r0 = rf(timeout)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(int64) []byte); ok {
		r1 = rf(timeout)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(timeout)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeanstalkHandler_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type MockBeanstalkHandler_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//   - timeout int64
func (_e *MockBeanstalkHandler_Expecter) Reserve(timeout interface{}) *MockBeanstalkHandler_Reserve_Call {
	return &MockBeanstalkHandler_Reserve_Call{Call: _e.mock.On("Reserve", timeout)}
}

func (_c *MockBeanstalkHandler_Reserve_Call) Run(run func(timeout int64)) *MockBeanstalkHandler_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Reserve_Call) Return(_a0 uint64, _a1 []byte, _a2 error) *MockBeanstalkHandler_Reserve_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBeanstalkHandler_Reserve_Call) RunAndReturn(run func(int64) (uint64, []byte, error)) *MockBeanstalkHandler_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveByID provides a mock function with given fields: id
func (_m *MockBeanstalkHandler) ReserveByID(id uint64) (uint64, []byte, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ReserveByID")
	}

	var r0 uint64
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, []byte, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) []byte); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(uint64) error); ok {
		r2 = rf(id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBeanstalkHandler_ReserveByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveByID'
type MockBeanstalkHandler_ReserveByID_Call struct {
	*mock.Call
}

// ReserveByID is a helper method to define mock.On call
//   - id uint64
func (_e *MockBeanstalkHandler_Expecter) ReserveByID(id interface{}) *MockBeanstalkHandler_ReserveByID_Call {
	return &MockBeanstalkHandler_ReserveByID_Call{Call: _e.mock.On("ReserveByID", id)}
}

func (_c *MockBeanstalkHandler_ReserveByID_Call) Run(run func(id uint64)) *MockBeanstalkHandler_ReserveByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_ReserveByID_Call) Return(_a0 uint64, _a1 []byte, _a2 error) *MockBeanstalkHandler_ReserveByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBeanstalkHandler_ReserveByID_Call) RunAndReturn(run func(uint64) (uint64, []byte, error)) *MockBeanstalkHandler_ReserveByID_Call {
	_c.Call.Return(run)
	return _c
}

// Touch provides a mock function with given fields: id
func (_m *MockBeanstalkHandler) Touch(id uint64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Touch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBeanstalkHandler_Touch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Touch'
type MockBeanstalkHandler_Touch_Call struct {
	*mock.Call
}

// Touch is a helper method to define mock.On call
//   - id uint64
func (_e *MockBeanstalkHandler_Expecter) Touch(id interface{}) *MockBeanstalkHandler_Touch_Call {
	return &MockBeanstalkHandler_Touch_Call{Call: _e.mock.On("Touch", id)}
}

func (_c *MockBeanstalkHandler_Touch_Call) Run(run func(id uint64)) *MockBeanstalkHandler_Touch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Touch_Call) Return(_a0 error) *MockBeanstalkHandler_Touch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBeanstalkHandler_Touch_Call) RunAndReturn(run func(uint64) error) *MockBeanstalkHandler_Touch_Call {
	_c.Call.Return(run)
	return _c
}

// Use provides a mock function with given fields: tube
func (_m *MockBeanstalkHandler) Use(tube string) (string, error) {
	ret := _m.Called(tube)

	if len(ret) == 0 {
		panic("no return value specified for Use")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(tube)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(tube)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tube)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeanstalkHandler_Use_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Use'
type MockBeanstalkHandler_Use_Call struct {
	*mock.Call
}

// Use is a helper method to define mock.On call
//   - tube string
func (_e *MockBeanstalkHandler_Expecter) Use(tube interface{}) *MockBeanstalkHandler_Use_Call {
	return &MockBeanstalkHandler_Use_Call{Call: _e.mock.On("Use", tube)}
}

func (_c *MockBeanstalkHandler_Use_Call) Run(run func(tube string)) *MockBeanstalkHandler_Use_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Use_Call) Return(_a0 string, _a1 error) *MockBeanstalkHandler_Use_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeanstalkHandler_Use_Call) RunAndReturn(run func(string) (string, error)) *MockBeanstalkHandler_Use_Call {
	_c.Call.Return(run)
	return _c
}

// Watch provides a mock function with given fields: tube
func (_m *MockBeanstalkHandler) Watch(tube string) (int, error) {
	ret := _m.Called(tube)

	if len(ret) == 0 {
		panic("no return value specified for Watch")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(tube)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(tube)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tube)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBeanstalkHandler_Watch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Watch'
type MockBeanstalkHandler_Watch_Call struct {
	*mock.Call
}

// Watch is a helper method to define mock.On call
//   - tube string
func (_e *MockBeanstalkHandler_Expecter) Watch(tube interface{}) *MockBeanstalkHandler_Watch_Call {
	return &MockBeanstalkHandler_Watch_Call{Call: _e.mock.On("Watch", tube)}
}

func (_c *MockBeanstalkHandler_Watch_Call) Run(run func(tube string)) *MockBeanstalkHandler_Watch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockBeanstalkHandler_Watch_Call) Return(_a0 int, _a1 error) *MockBeanstalkHandler_Watch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBeanstalkHandler_Watch_Call) RunAndReturn(run func(string) (int, error)) *MockBeanstalkHandler_Watch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBeanstalkHandler creates a new instance of MockBeanstalkHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBeanstalkHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBeanstalkHandler {
	mock := &MockBeanstalkHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
